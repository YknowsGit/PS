// 컴백호
package Random._2025.Random1Day7M;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Q1189 {

    static boolean[][] visited = new boolean[5][5];
    static int r, c, k;
    static int count = 0;
    static int nx, ny;
    static int[] dx = {-1, 0, 1, 0};
    static int[] dy = {0, 1, 0, -1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        r = Integer.parseInt(st.nextToken());
        c = Integer.parseInt(st.nextToken());
        k = Integer.parseInt(st.nextToken());
        char[][] arr = new char[r][c];
        for (int i = 0; i < r; i++) {
            String str = br.readLine();
            for (int j = 0; j < c; j++) {
                arr[i][j] = str.charAt(j);
            }
        }
        
        dfs(r-1, 0, 1, arr);
        System.out.println(count);
    }
    
    public static void dfs(int x, int y, int dist, char[][] arr) {
        
        if (x < 0 || y < 0 || x >= r || y >= c || visited[x][y] || arr[x][y] == 'T') {
            return;
        }
        
        if (x == 0 && y == c - 1 && dist == k) {
            count++;
            return;
        }
        
        visited[x][y] = true;
        for (int dir = 0; dir < 4; dir++) {
            nx = x + dx[dir];
            ny = y + dy[dir];
            dfs(nx, ny, dist + 1, arr);
        }
        visited[x][y] = false;


    }
}
/*
3 4 6 => 4

  0 1 2 3
0 . . . .
1 . T . .
2 . . . .

경로 1. (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3)
경로 2. (2,0) -> (2,1) -> (2,2) -> (1,2) -> (0,2) -> (0,3)
경로 3. (2,0) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (0,3)
경로 4. (2,0) -> (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3)

종착지인 (0,3)에 도착해야 함. but, 일찍 도착하면 안됨
=> 현재 지점 (0, c-1) && 거리가 k 이어야 함.
 */

/*
★ 종료 조건 1번째와 2번째의 순서가 바뀌면 안됨.

=> Why?

종료조건 2. 만약 위치가 (0, c-1)이고, 거리도 k라면 count++ 

그런데 그 자리가 실제로는...
종료조건 1. 벽('T')일 수도 있고 이미 방문한 곳일 수도 있음.

따라서 그걸 밑에서 확인할 경우,
벽이거나 방문한 칸이더라도 count++ 먼저 실행됨.
 */
