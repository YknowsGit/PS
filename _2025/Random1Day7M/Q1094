// 막대기
package Random._2025.Random1Day7M;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Q1094 {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int count = 0;
        // n = 23 => 10111
        // n = 11 => 1011
        // n = 5  => 101
        // n = 2  => 10
        // n = 1  => 1
        while (n > 0) {
            if (n % 2 == 1) { // (n & 1) == 1
                count++;
                n = n / 2; // n = n >> 1
            } else {
                n = n / 2;
            }
        }
        System.out.println(count);
    }
}
/* 비트 마스크
x << y = x * 2^y

x >> y = x / 2^y
 */
/*
64가지고있다. 23인 막대가 가지고싶어졌다.
1. 64막대 하나만 가지고있다. 합이 23보다 크다면 아래 과정 반복
   1. 64 / 2 = 32(1), 32(2)
   2. 32(1)버리고 남아있는 막대의 길이의 합 = 32(2)이
   x=23보다 크거나 같다면, 위에서 자른 막대의 절반 중 하나를 버린다.
   32의 절반 16(1), 16(2)중 하나를 버린다. 16만 남음?
2. 이제, 남아있는 모든 막대를 풀로 붙여서 23을 만든다

x=23 막대
64 = 32 + 32
32 = 16 + 16
16 > 23 X => 이제 버리면 안 됨.
16 = 8 + 8
8 = 4 + 4
4 = 2 + 2
2 = 1 + 1
1

★ x를 비트로 나타낸 1의 갯수
16 + 4 + 2 + 1
23 = 10111
=> 비트의 갯수 출력 정답 = 4

x=48
32+16 = 110000
=> 비트의 갯수 출력 정답 = 2
 */
